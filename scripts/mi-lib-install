#!/bin/sh

echo "installing required packages..."

# get apt packages
# (for download & compilation)
sudo apt install git wget unzip rename make gcc fakeroot
# (for ZEDA & X11 & GL)
sudo apt install libxml2-dev xorg-dev libtiff-dev libjpeg-dev freeglut3-dev

# read variables in config file.
. ./config

# install libraries from Debian packages
if [ "$1" = "deb" ]; then
    echo "installing libraries from .deb packages..."
    for lib in ${LIBS}
    do
	sudo dpkg -i deb/${lib}_*.*.*.deb
    done
    echo "completed."
    exit 0
fi

if [ -z ${PREFIX} ]; then
  PREFIX=${HOME}/usr
fi

# check if installer has to be run by the superuser
SUDO=
if [ `ls -ld ${PREFIX} | cut -d " " -f 3` != `whoami` ]; then
  SUDO="sudo"
fi

echo "installing libraries and tools under" ${PREFIX} "..."

BINDIR=${PREFIX}/bin
INCDIR=${PREFIX}/include
LIBDIR=${PREFIX}/lib

# make directories

for dir in ${BINDIR} ${INCDIR} ${LIBDIR}
do
  if [ ! -d ${dir} ]; then
    echo "making directory" ${dir} "..."
    ${SUDO} mkdir -m 755 -p ${dir}
  fi
done

# check if path is valid

if [ -z `echo ${PATH} | grep ${BINDIR}` ]; then
  echo "Add ${BINDIR} into your PATH by"
  echo "  export PATH=${BINDIR}:\$PATH"
  echo "for Bourne shell family (bash, zsh, ksh, etc.), or by"
  echo "  set path = ( ${BINDIR} \$path )"
  echo "for C shell family (csh, tcsh etc.)."
  exit 0
fi
echo ${BINDIR} "... valid path."

# check if libraries are visible from linker

if [ -z `echo $LD_LIBRARY_PATH | grep $LIBDIR` ]; then
  echo "Add ${LIBDIR} into your LD_LIBRARY_PATH by"
  echo "  export LD_LIBRARY_PATH=${LIBDIR}:\$LD_LIBRARY_PATH"
  echo "for Bourne shell family (bash, zsh, ksh, etc.), or by"
  echo "  setenv LD_LIBRARY_PATH ${LIBDIR}:\$LD_LIBRARY_PATH"
  echo "for C shell family (csh, tcsh etc.)."
  exit 0
fi
echo ${LIBDIR} "in LD_LIBRARY_PATH."

# download zip files from GitHub repositories and unzip them.
download_and_unzip(){
  echo "downloading" ${lib} "..."
  wget https://github.com/mi-lib/${lib}/archive/refs/heads/main.zip
  echo "unarchiving" ${lib} "..."
  unzip main.zip
  rm main.zip
  rename 's/-main//' *-main
}

# git clone repositories
git_clone(){
  echo "cloning" ${lib} "..."
  git clone git@github.com:mi-lib/${lib}.git
}

# download archive files from GitHub, compile, and install libraries
for lib in ${LIBS}
do
  # download & unarchive
  if [ ! -d ${lib} ]; then
    if [ "$1" = "clone" ]; then
      git_clone
    else
      download_and_unzip
    fi
  fi
  # compile & install
  echo "compiling" ${lib} "..."
  if [ -d ${lib} ]; then
    cd ${lib}
    if [ -n "${PREFIX}" ]; then
	rm config;
	cat config.org | sed -e "/^PREFIX/c\PREFIX=${PREFIX}" > config;
    fi
    if [ ! -f config ]; then
	cp config.org config;
    fi
    make clean
    make  SHELL='sh -x' CC=${CC} STD=${STD} && ${SUDO} make install || ( echo  "failed to compile " ${lib}; exit 1 )
    cd -
  else
    echo "cannot find directory" ${lib}
    exit 1
  fi
done

echo "completed."

exit 0
